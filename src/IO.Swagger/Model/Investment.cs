/* 
 * Core Investment Tracker API
 *
 * Investment tracker is a platform that allows you to track aspects that affect your investments
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents an investment
    /// </summary>
    [DataContract]
    public partial class Investment :  IEquatable<Investment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Investment" /> class.
        /// </summary>
        /// <param name="symbol">Symbol.</param>
        /// <param name="valueProposition">Value proposition.</param>
        /// <param name="desirabilityStatement">Desirability statement.</param>
        /// <param name="initialInvestment">Initial investment.</param>
        /// <param name="value">Investment value.</param>
        /// <param name="factors">Factors.</param>
        /// <param name="regions">Regions.</param>
        /// <param name="risks">Risks.</param>
        /// <param name="groups">Groups.</param>
        /// <param name="customEntities">Associated custom entities.</param>
        /// <param name="transactions">List of transactions.</param>
        /// <param name="investmentIds">investmentIds.</param>
        /// <param name="id">The identifier of the entity.</param>
        /// <param name="name">The name of the entity.</param>
        /// <param name="description">The description of the entity.</param>
        /// <param name="createdTime">When the entity was created.</param>
        /// <param name="lastModifiedTime">When the entity was last modified.</param>
        /// <param name="points">Generic points for this entity.</param>
        /// <param name="isFlagged">Generic true/false marker for entity.</param>
        public Investment(string symbol = default(string), string valueProposition = default(string), string desirabilityStatement = default(string), float? initialInvestment = default(float?), float? value = default(float?), List<InvestmentInfluenceFactorInvestment> factors = default(List<InvestmentInfluenceFactorInvestment>), List<RegionInvestment> regions = default(List<RegionInvestment>), List<InvestmentRiskInvestment> risks = default(List<InvestmentRiskInvestment>), List<InvestmentGroupInvestment> groups = default(List<InvestmentGroupInvestment>), List<CustomEntityInvestment> customEntities = default(List<CustomEntityInvestment>), List<InvestmentTransaction> transactions = default(List<InvestmentTransaction>), List<int?> investmentIds = default(List<int?>), int? id = default(int?), string name = default(string), string description = default(string), DateTime? createdTime = default(DateTime?), DateTime? lastModifiedTime = default(DateTime?), long? points = default(long?), bool? isFlagged = default(bool?))
        {
            this.Symbol = symbol;
            this.ValueProposition = valueProposition;
            this.DesirabilityStatement = desirabilityStatement;
            this.InitialInvestment = initialInvestment;
            this.Value = value;
            this.Factors = factors;
            this.Regions = regions;
            this.Risks = risks;
            this.Groups = groups;
            this.CustomEntities = customEntities;
            this.Transactions = transactions;
            this.InvestmentIds = investmentIds;
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.CreatedTime = createdTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Points = points;
            this.IsFlagged = isFlagged;
        }
        
        /// <summary>
        /// Symbol
        /// </summary>
        /// <value>Symbol</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Value proposition
        /// </summary>
        /// <value>Value proposition</value>
        [DataMember(Name="valueProposition", EmitDefaultValue=false)]
        public string ValueProposition { get; set; }

        /// <summary>
        /// Desirability statement
        /// </summary>
        /// <value>Desirability statement</value>
        [DataMember(Name="desirabilityStatement", EmitDefaultValue=false)]
        public string DesirabilityStatement { get; set; }

        /// <summary>
        /// Initial investment
        /// </summary>
        /// <value>Initial investment</value>
        [DataMember(Name="initialInvestment", EmitDefaultValue=false)]
        public float? InitialInvestment { get; set; }

        /// <summary>
        /// Investment value
        /// </summary>
        /// <value>Investment value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// Factors
        /// </summary>
        /// <value>Factors</value>
        [DataMember(Name="factors", EmitDefaultValue=false)]
        public List<InvestmentInfluenceFactorInvestment> Factors { get; set; }

        /// <summary>
        /// Regions
        /// </summary>
        /// <value>Regions</value>
        [DataMember(Name="regions", EmitDefaultValue=false)]
        public List<RegionInvestment> Regions { get; set; }

        /// <summary>
        /// Risks
        /// </summary>
        /// <value>Risks</value>
        [DataMember(Name="risks", EmitDefaultValue=false)]
        public List<InvestmentRiskInvestment> Risks { get; set; }

        /// <summary>
        /// Groups
        /// </summary>
        /// <value>Groups</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<InvestmentGroupInvestment> Groups { get; set; }

        /// <summary>
        /// Associated custom entities
        /// </summary>
        /// <value>Associated custom entities</value>
        [DataMember(Name="customEntities", EmitDefaultValue=false)]
        public List<CustomEntityInvestment> CustomEntities { get; set; }

        /// <summary>
        /// List of transactions
        /// </summary>
        /// <value>List of transactions</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<InvestmentTransaction> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentIds
        /// </summary>
        [DataMember(Name="investmentIds", EmitDefaultValue=false)]
        public List<int?> InvestmentIds { get; set; }

        /// <summary>
        /// The identifier of the entity
        /// </summary>
        /// <value>The identifier of the entity</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the entity
        /// </summary>
        /// <value>The name of the entity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the entity
        /// </summary>
        /// <value>The description of the entity</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// When the entity was created
        /// </summary>
        /// <value>When the entity was created</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// When the entity was last modified
        /// </summary>
        /// <value>When the entity was last modified</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Generic points for this entity
        /// </summary>
        /// <value>Generic points for this entity</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public long? Points { get; set; }

        /// <summary>
        /// Generic true/false marker for entity
        /// </summary>
        /// <value>Generic true/false marker for entity</value>
        [DataMember(Name="isFlagged", EmitDefaultValue=false)]
        public bool? IsFlagged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Investment {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ValueProposition: ").Append(ValueProposition).Append("\n");
            sb.Append("  DesirabilityStatement: ").Append(DesirabilityStatement).Append("\n");
            sb.Append("  InitialInvestment: ").Append(InitialInvestment).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Factors: ").Append(Factors).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Risks: ").Append(Risks).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  CustomEntities: ").Append(CustomEntities).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  InvestmentIds: ").Append(InvestmentIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  IsFlagged: ").Append(IsFlagged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Investment);
        }

        /// <summary>
        /// Returns true if Investment instances are equal
        /// </summary>
        /// <param name="input">Instance of Investment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Investment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.ValueProposition == input.ValueProposition ||
                    (this.ValueProposition != null &&
                    this.ValueProposition.Equals(input.ValueProposition))
                ) && 
                (
                    this.DesirabilityStatement == input.DesirabilityStatement ||
                    (this.DesirabilityStatement != null &&
                    this.DesirabilityStatement.Equals(input.DesirabilityStatement))
                ) && 
                (
                    this.InitialInvestment == input.InitialInvestment ||
                    (this.InitialInvestment != null &&
                    this.InitialInvestment.Equals(input.InitialInvestment))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Factors == input.Factors ||
                    this.Factors != null &&
                    this.Factors.SequenceEqual(input.Factors)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions != null &&
                    this.Regions.SequenceEqual(input.Regions)
                ) && 
                (
                    this.Risks == input.Risks ||
                    this.Risks != null &&
                    this.Risks.SequenceEqual(input.Risks)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.CustomEntities == input.CustomEntities ||
                    this.CustomEntities != null &&
                    this.CustomEntities.SequenceEqual(input.CustomEntities)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.InvestmentIds == input.InvestmentIds ||
                    this.InvestmentIds != null &&
                    this.InvestmentIds.SequenceEqual(input.InvestmentIds)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.IsFlagged == input.IsFlagged ||
                    (this.IsFlagged != null &&
                    this.IsFlagged.Equals(input.IsFlagged))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.ValueProposition != null)
                    hashCode = hashCode * 59 + this.ValueProposition.GetHashCode();
                if (this.DesirabilityStatement != null)
                    hashCode = hashCode * 59 + this.DesirabilityStatement.GetHashCode();
                if (this.InitialInvestment != null)
                    hashCode = hashCode * 59 + this.InitialInvestment.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Factors != null)
                    hashCode = hashCode * 59 + this.Factors.GetHashCode();
                if (this.Regions != null)
                    hashCode = hashCode * 59 + this.Regions.GetHashCode();
                if (this.Risks != null)
                    hashCode = hashCode * 59 + this.Risks.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.CustomEntities != null)
                    hashCode = hashCode * 59 + this.CustomEntities.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.InvestmentIds != null)
                    hashCode = hashCode * 59 + this.InvestmentIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.IsFlagged != null)
                    hashCode = hashCode * 59 + this.IsFlagged.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
