/* 
 * Core Investment Tracker API
 *
 * Investment tracker is a platform that allows you to track aspects that affect your investments
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents a transaction on an investment
    /// </summary>
    [DataContract]
    public partial class InvestmentTransaction :  IEquatable<InvestmentTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentTransaction" /> class.
        /// </summary>
        /// <param name="investmentId">investmentId.</param>
        /// <param name="numUnits">The number of units bought.</param>
        /// <param name="pricePerUnit">The price per unit.</param>
        /// <param name="currency">ISO code that represents the currency.</param>
        /// <param name="transactionType">Eg Buy, Sell.</param>
        /// <param name="transactionDate">Time that the transaction was made.</param>
        /// <param name="id">The identifier of the entity.</param>
        /// <param name="name">The name of the entity.</param>
        /// <param name="description">The description of the entity.</param>
        /// <param name="createdTime">When the entity was created.</param>
        /// <param name="lastModifiedTime">When the entity was last modified.</param>
        /// <param name="points">Generic points for this entity.</param>
        /// <param name="isFlagged">Generic true/false marker for entity.</param>
        public InvestmentTransaction(int? investmentId = default(int?), int? numUnits = default(int?), float? pricePerUnit = default(float?), string currency = default(string), string transactionType = default(string), DateTime? transactionDate = default(DateTime?), int? id = default(int?), string name = default(string), string description = default(string), DateTime? createdTime = default(DateTime?), DateTime? lastModifiedTime = default(DateTime?), long? points = default(long?), bool? isFlagged = default(bool?))
        {
            this.InvestmentId = investmentId;
            this.NumUnits = numUnits;
            this.PricePerUnit = pricePerUnit;
            this.Currency = currency;
            this.TransactionType = transactionType;
            this.TransactionDate = transactionDate;
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.CreatedTime = createdTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Points = points;
            this.IsFlagged = isFlagged;
        }
        
        /// <summary>
        /// Gets or Sets InvestmentId
        /// </summary>
        [DataMember(Name="investmentId", EmitDefaultValue=false)]
        public int? InvestmentId { get; set; }

        /// <summary>
        /// The number of units bought
        /// </summary>
        /// <value>The number of units bought</value>
        [DataMember(Name="numUnits", EmitDefaultValue=false)]
        public int? NumUnits { get; set; }

        /// <summary>
        /// The price per unit
        /// </summary>
        /// <value>The price per unit</value>
        [DataMember(Name="pricePerUnit", EmitDefaultValue=false)]
        public float? PricePerUnit { get; set; }

        /// <summary>
        /// ISO code that represents the currency
        /// </summary>
        /// <value>ISO code that represents the currency</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Eg Buy, Sell
        /// </summary>
        /// <value>Eg Buy, Sell</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Time that the transaction was made
        /// </summary>
        /// <value>Time that the transaction was made</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentIds
        /// </summary>
        [DataMember(Name="investmentIds", EmitDefaultValue=false)]
        public List<int?> InvestmentIds { get; private set; }

        /// <summary>
        /// The identifier of the entity
        /// </summary>
        /// <value>The identifier of the entity</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the entity
        /// </summary>
        /// <value>The name of the entity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the entity
        /// </summary>
        /// <value>The description of the entity</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// When the entity was created
        /// </summary>
        /// <value>When the entity was created</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// When the entity was last modified
        /// </summary>
        /// <value>When the entity was last modified</value>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Generic points for this entity
        /// </summary>
        /// <value>Generic points for this entity</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public long? Points { get; set; }

        /// <summary>
        /// Generic true/false marker for entity
        /// </summary>
        /// <value>Generic true/false marker for entity</value>
        [DataMember(Name="isFlagged", EmitDefaultValue=false)]
        public bool? IsFlagged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvestmentTransaction {\n");
            sb.Append("  InvestmentId: ").Append(InvestmentId).Append("\n");
            sb.Append("  NumUnits: ").Append(NumUnits).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  InvestmentIds: ").Append(InvestmentIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  IsFlagged: ").Append(IsFlagged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentTransaction);
        }

        /// <summary>
        /// Returns true if InvestmentTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvestmentId == input.InvestmentId ||
                    (this.InvestmentId != null &&
                    this.InvestmentId.Equals(input.InvestmentId))
                ) && 
                (
                    this.NumUnits == input.NumUnits ||
                    (this.NumUnits != null &&
                    this.NumUnits.Equals(input.NumUnits))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.InvestmentIds == input.InvestmentIds ||
                    this.InvestmentIds != null &&
                    this.InvestmentIds.SequenceEqual(input.InvestmentIds)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.IsFlagged == input.IsFlagged ||
                    (this.IsFlagged != null &&
                    this.IsFlagged.Equals(input.IsFlagged))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvestmentId != null)
                    hashCode = hashCode * 59 + this.InvestmentId.GetHashCode();
                if (this.NumUnits != null)
                    hashCode = hashCode * 59 + this.NumUnits.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.InvestmentIds != null)
                    hashCode = hashCode * 59 + this.InvestmentIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.IsFlagged != null)
                    hashCode = hashCode * 59 + this.IsFlagged.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
