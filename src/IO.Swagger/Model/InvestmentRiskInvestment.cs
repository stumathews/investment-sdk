/* 
 * Core Investment Tracker API
 *
 * Investment tracker is a platform that allows you to track aspects that affect your investments
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InvestmentRiskInvestment
    /// </summary>
    [DataContract]
    public partial class InvestmentRiskInvestment :  IEquatable<InvestmentRiskInvestment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentRiskInvestment" /> class.
        /// </summary>
        /// <param name="investmentRiskID">investmentRiskID.</param>
        /// <param name="investmentRisk">investmentRisk.</param>
        /// <param name="investmentID">investmentID.</param>
        /// <param name="investment">investment.</param>
        public InvestmentRiskInvestment(int? investmentRiskID = default(int?), InvestmentRisk investmentRisk = default(InvestmentRisk), int? investmentID = default(int?), Investment investment = default(Investment))
        {
            this.InvestmentRiskID = investmentRiskID;
            this.InvestmentRisk = investmentRisk;
            this.InvestmentID = investmentID;
            this.Investment = investment;
        }
        
        /// <summary>
        /// Gets or Sets InvestmentRiskID
        /// </summary>
        [DataMember(Name="investmentRiskID", EmitDefaultValue=false)]
        public int? InvestmentRiskID { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentRisk
        /// </summary>
        [DataMember(Name="investmentRisk", EmitDefaultValue=false)]
        public InvestmentRisk InvestmentRisk { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentID
        /// </summary>
        [DataMember(Name="investmentID", EmitDefaultValue=false)]
        public int? InvestmentID { get; set; }

        /// <summary>
        /// Gets or Sets Investment
        /// </summary>
        [DataMember(Name="investment", EmitDefaultValue=false)]
        public Investment Investment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvestmentRiskInvestment {\n");
            sb.Append("  InvestmentRiskID: ").Append(InvestmentRiskID).Append("\n");
            sb.Append("  InvestmentRisk: ").Append(InvestmentRisk).Append("\n");
            sb.Append("  InvestmentID: ").Append(InvestmentID).Append("\n");
            sb.Append("  Investment: ").Append(Investment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentRiskInvestment);
        }

        /// <summary>
        /// Returns true if InvestmentRiskInvestment instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentRiskInvestment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentRiskInvestment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvestmentRiskID == input.InvestmentRiskID ||
                    (this.InvestmentRiskID != null &&
                    this.InvestmentRiskID.Equals(input.InvestmentRiskID))
                ) && 
                (
                    this.InvestmentRisk == input.InvestmentRisk ||
                    (this.InvestmentRisk != null &&
                    this.InvestmentRisk.Equals(input.InvestmentRisk))
                ) && 
                (
                    this.InvestmentID == input.InvestmentID ||
                    (this.InvestmentID != null &&
                    this.InvestmentID.Equals(input.InvestmentID))
                ) && 
                (
                    this.Investment == input.Investment ||
                    (this.Investment != null &&
                    this.Investment.Equals(input.Investment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvestmentRiskID != null)
                    hashCode = hashCode * 59 + this.InvestmentRiskID.GetHashCode();
                if (this.InvestmentRisk != null)
                    hashCode = hashCode * 59 + this.InvestmentRisk.GetHashCode();
                if (this.InvestmentID != null)
                    hashCode = hashCode * 59 + this.InvestmentID.GetHashCode();
                if (this.Investment != null)
                    hashCode = hashCode * 59 + this.Investment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
