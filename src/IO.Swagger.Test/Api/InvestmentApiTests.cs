/* 
 * Core Investment Tracker API
 *
 * Investment tracker is a platform that allows you to track aspects that affect your investments
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing InvestmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InvestmentApiTests
    {
        private InvestmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InvestmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InvestmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InvestmentApi
            //Assert.IsInstanceOfType(typeof(InvestmentApi), instance, "instance is a InvestmentApi");
        }

        
        /// <summary>
        /// Test AssociateCustomEntities
        /// </summary>
        [Test]
        public void AssociateCustomEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<int?> customEnityIds = null;
            //instance.AssociateCustomEntities(id, customEnityIds);
            
        }
        
        /// <summary>
        /// Test AssociateFactors
        /// </summary>
        [Test]
        public void AssociateFactorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<int?> factorIds = null;
            //instance.AssociateFactors(id, factorIds);
            
        }
        
        /// <summary>
        /// Test AssociateGroups
        /// </summary>
        [Test]
        public void AssociateGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<int?> groupIDs = null;
            //instance.AssociateGroups(id, groupIDs);
            
        }
        
        /// <summary>
        /// Test AssociateRegions
        /// </summary>
        [Test]
        public void AssociateRegionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<int?> regionIDs = null;
            //instance.AssociateRegions(id, regionIDs);
            
        }
        
        /// <summary>
        /// Test AssociateRisks
        /// </summary>
        [Test]
        public void AssociateRisksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<int?> riskIds = null;
            //instance.AssociateRisks(id, riskIds);
            
        }
        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Investment entity = null;
            //instance.Create(entity);
            
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.Delete(id);
            
        }
        
        /// <summary>
        /// Test DissassociateCustomEntity
        /// </summary>
        [Test]
        public void DissassociateCustomEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? customEntityId = null;
            //int? investmentId = null;
            //instance.DissassociateCustomEntity(customEntityId, investmentId);
            
        }
        
        /// <summary>
        /// Test DissassociateFactor
        /// </summary>
        [Test]
        public void DissassociateFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? factorId = null;
            //int? investmentId = null;
            //instance.DissassociateFactor(factorId, investmentId);
            
        }
        
        /// <summary>
        /// Test DissassociateGroup
        /// </summary>
        [Test]
        public void DissassociateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? groupId = null;
            //int? investmentId = null;
            //instance.DissassociateGroup(groupId, investmentId);
            
        }
        
        /// <summary>
        /// Test DissassociateRegion
        /// </summary>
        [Test]
        public void DissassociateRegionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? regionId = null;
            //int? investmentId = null;
            //instance.DissassociateRegion(regionId, investmentId);
            
        }
        
        /// <summary>
        /// Test DissassociateRisk
        /// </summary>
        [Test]
        public void DissassociateRiskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? riskId = null;
            //int? investmentId = null;
            //instance.DissassociateRisk(riskId, investmentId);
            
        }
        
        /// <summary>
        /// Test GenerateCustomEntitiesGraph
        /// </summary>
        [Test]
        public void GenerateCustomEntitiesGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GenerateCustomEntitiesGraph(id);
            
        }
        
        /// <summary>
        /// Test GenerateEntityInvestmentsGraphFor
        /// </summary>
        [Test]
        public void GenerateEntityInvestmentsGraphForTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? entityId = null;
            //instance.GenerateEntityInvestmentsGraphFor(entityId);
            
        }
        
        /// <summary>
        /// Test GenerateFactorsGraph
        /// </summary>
        [Test]
        public void GenerateFactorsGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GenerateFactorsGraph(id);
            
        }
        
        /// <summary>
        /// Test GenerateGroupsGraph
        /// </summary>
        [Test]
        public void GenerateGroupsGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GenerateGroupsGraph(id);
            
        }
        
        /// <summary>
        /// Test GenerateRegionsGraph
        /// </summary>
        [Test]
        public void GenerateRegionsGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GenerateRegionsGraph(id);
            
        }
        
        /// <summary>
        /// Test GenerateRisksGraph
        /// </summary>
        [Test]
        public void GenerateRisksGraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GenerateRisksGraph(id);
            
        }
        
        /// <summary>
        /// Test GenerateSharedGraphDataForAll
        /// </summary>
        [Test]
        public void GenerateSharedGraphDataForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GenerateSharedGraphDataForAll();
            
        }
        
        /// <summary>
        /// Test GetAll
        /// </summary>
        [Test]
        public void GetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAll();
            //Assert.IsInstanceOf<List<Investment>> (response, "response is List<Investment>");
        }
        
        /// <summary>
        /// Test GetAllWithoutChildren
        /// </summary>
        [Test]
        public void GetAllWithoutChildrenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllWithoutChildren();
            //Assert.IsInstanceOf<List<Investment>> (response, "response is List<Investment>");
        }
        
        /// <summary>
        /// Test GetById
        /// </summary>
        [Test]
        public void GetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.GetById(id);
            
        }
        
        /// <summary>
        /// Test Import
        /// </summary>
        [Test]
        public void ImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Investment> entities = null;
            //instance.Import(entities);
            
        }
        
        /// <summary>
        /// Test InvestmentByFactor
        /// </summary>
        [Test]
        public void InvestmentByFactorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.InvestmentByFactor(id);
            
        }
        
        /// <summary>
        /// Test InvestmentByGroup
        /// </summary>
        [Test]
        public void InvestmentByGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.InvestmentByGroup(id);
            
        }
        
        /// <summary>
        /// Test InvestmentByRegion
        /// </summary>
        [Test]
        public void InvestmentByRegionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.InvestmentByRegion(id);
            
        }
        
        /// <summary>
        /// Test InvestmentByRisk
        /// </summary>
        [Test]
        public void InvestmentByRiskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.InvestmentByRisk(id);
            
        }
        
        /// <summary>
        /// Test Patch
        /// </summary>
        [Test]
        public void PatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //List<Operation> patchDocument = null;
            //instance.Patch(id, patchDocument);
            
        }
        
        /// <summary>
        /// Test Replace
        /// </summary>
        [Test]
        public void ReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Investment newItem = null;
            //instance.Replace(id, newItem);
            
        }
        
    }

}
